package site.projectname.nicasm;

import java.io.File;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;


import site.projectname.util.Logger;
import site.projectname.util.Numbers;
/**
 * Assembles .nic inFiles into usable hex-format for nicpc
 *
 * @author      Brian Donald
 * @version     0.0
 * @since       2017-4-18
 */
public class Assembler{

    /**
     * Name of the file to compile
     */
    public static String fileName;

    private static Logger log;
    private static Scanner inFile;
    private static PrintWriter outFile;
    private static int lineNumber = 1;
    private static HashMap<String,Integer> labels = new HashMap<String,Integer>();
    private static HashMap<String,Integer> variables = new HashMap<String,Integer>();
    private static ArrayList<String> errors = new ArrayList<String>();
    /**
     * All valid Assembly Commands for nic
     */

    /**
     * Regex for Register inputs, i.e. R0-R7
     */
    public final static String  regRegEx = "(R[0-7])";
    /**
     * Regex for spaces between arguments
     */
    public final static String  spaRegEx = "([,][ ]*)";
    /**
     * Regex for hexadecimal immediate value (x00 - x1F) (5 Bits)
     */
    public final static String  hexRegEx5 = "([x]([0,1]([0-9]|[A-F])))";
    /**
     * Regex for decimal immediate value (00-31) (5 Bits)
     */
    public final static String  decRegEx5 = "([#](([0-2]?[0-9])|([3][0-1])))";
    /**
     * Regex for any immediate value (6 Bits)
     */
    public final static String  immRegEx5 = "("+hexRegEx5 + "|" + decRegEx5 +")";
    /**
     * Regex for hexadecimal immediate value (x00 - x3F) (6 Bits)
     */
    public final static String  hexRegEx6 = "([x]([0-3]?([0-9]|[A-F])))";
    /**
     * Regex for decimal immediate value (00-63) (6 Bits)
     */
    public final static String  decRegEx6 = "([#](([0-5]?[0-9])|([6][0-3])))";
    /**
     * Regex for any immediate value (6 Bits)
     */
    public final static String  immRegEx6 = "("+hexRegEx6 + "|" + decRegEx6 +")";
    /**
     * Regex for hexadecimal immediate value (x00 - xFF) (8 Bits)
     */
    public final static String  hexRegEx8 = "([x]([0-9]|[A-F]){1,2})";
    /**
     * Regex for decimal immediate value (00-255) (8 Bits)
     */
    public final static String  decRegEx8 = "([#]([0-2]?[0-9]?[0-9]?))";
    /**
     * Regex for any immediate value (8 Bits)
     */
    public final static String  immRegEx8 = "("+hexRegEx8 + "|" + decRegEx8 +")";



    /**
     * Regex for a label
     */
    public final static String labRegEx = "([*][A-Z]*)";

    /**
     * Regex for a variable
     */
    public final static String varRegEx = "([$][A-Z]*)";

    /**
     * Regex for all valid characters
     */
    public final static String valRegEx = "[0-9]|[A-Z]|[,]|[ ]|[*]|[$]|[x]|[#]";


    /**
     * Searches for Variables and Labels to get their position
     * @param   line    line to parse
     */
    public static String firstPass(String line){
        String l = line.split("([\\s]+)")[0];
        if(l.startsWith("$")){
            if(l.matches(varRegEx)){
                log.debug("Variable " + l + " found on line " + lineNumber);
                variables.put(l,lineNumber);
            } else {
                log.debug("Invalid variable " + l + " on line " + lineNumber);
                errors.add("Invalid Variable " + l + " on line " + lineNumber + "\n\t\t" + line);
            }
        } else if (l.startsWith("*")){
            if(l.matches(labRegEx)){
                log.debug("Label " + l + " found on line " + lineNumber);
                labels.put(l,lineNumber);
            } else {
                log.debug("Invalid label " + l + " on line " + lineNumber);
                errors.add("Invalid Label " + l + " on line " + lineNumber + "\n\t\t" + line);
            }
        }
        lineNumber++;
        if(line.contains(";")){
            line = line.substring(0,line.indexOf(";"));
        }
        line = line.replace(l,"");
        while(!(line.charAt(0) + "").matches("[\\w]"))
            line = line.substring(1);
        return line;
    }

    /**
     * Compiles a single line of assembly
     * @param   line    Line to be compiled
     * @return          Hex value of inputted command
     */
    public static String convertLine(String line) {
        lineNumber++;
        if(line.equals(""))
            return "";
        log.debug("\b----------------------------------------|-|");
        char[] outBinary = {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'};
        line = line.split(";")[0]; // Disregard Comments
        log.debug("Line "+lineNumber+"\t: " + line);

        if(Command.contains(line.split(" ")[0])){
            Command com = Command.valueOf(line.split(" ")[0]);
            if(line.matches(com.regex+"[\\s]*")){
                String[] parts = line.split("[ ]|"+ spaRegEx);
                int bitCounter = 11;
                String[] syntax = com.syntax.split(" ");
                int regCounter = 1;

                log.debug("Line split into: " + Arrays.toString(parts));
                for(int bit=15;bit>=12;bit--){
                    log.debug("Setting bit " + bit + " with value " + com.firstFour.charAt(15-bit) + " from command code");
                    outBinary[bit] = com.firstFour.charAt(15-bit);
                }



                for(String s: syntax){
                    if(bitCounter == 5 && (parts[0].equals("AND") || parts[0].equals("ADD"))){
                        if(parts[3].matches(immRegEx5)){
                            // Has Immediate Value
                            outBinary[5] = '1';
                            log.debug("Setting bit 5 with value 1");
                            String binary = "";
                            if(parts[3].matches(hexRegEx5)){
                                binary = Numbers.hexToBin(parts[3],5);
                            } else if (parts[3].matches(decRegEx5)){
                                binary = Numbers.decToBin(Integer.parseInt(parts[3].substring(1)),5,true);
                            } else {
                                log.debug("Invalid immediate value given!");
                            }
                            for(int bit=4; bit>=0; bit--){
                                log.debug("Setting bit " + bit + " with value " + binary.charAt(bit) + " from immediate value");
                                outBinary[4-bit] = binary.charAt(bit);
                            }
                        }
                        else{
                            // Has Register Value
                            outBinary[5]='0';
                            log.debug("Setting bit 5 with value 0");
                            outBinary[4]='0';
                            log.debug("Setting bit 4 with value 0");
                            outBinary[3]='0';
                            log.debug("Setting bit 3 with value 0");
                        }
                    }
                    else if(bitCounter == 7 && parts[0].equals("TRAP")){
                        if(parts[1].matches(immRegEx8)){
                            String binary = "";
                            if(parts[1].matches(hexRegEx8))
                                binary = Numbers.hexToBin(parts[1],8);
                            else if(parts[1].matches(decRegEx8))
                                binary = Numbers.decToBin(Integer.parseInt(parts[1].substring(1)),8,true);
                            else {
                                String error = "\tInvalid 8-bit Immediate Value on line "+lineNumber+"! \n\t\t"+line+"\n\t\t";
                                error += "      ^ INVALID VALUE!";
                                errors.add(error);
                                log.debug(error);
                            }
                            for(int bit=7;bit>=0;bit--){
                                log.debug("Setting bit " + bit + " with value " + binary.charAt(bit) + " from immediate value");
                                outBinary[7-bit] = binary.charAt(bit);
                            }
                        } else {
                            String error = "\tInvalid 8-bit Immediate Value on line "+lineNumber+"! \n\t\t"+line+"\n\t\t";
                            error += "      ^ INVALID VALUE!";
                            errors.add(error);
                            log.debug(error);
                        }
                    }
                    if (s.contains("X") && parts[regCounter].contains("*")){
                        int lineDif = labels.get(parts[regCounter++]) - lineNumber;
                        log.debug("Line Difference = " + lineDif);
                        String bits = Numbers.decToBin(lineDif,s.length(),true); // TODO: Add negative binary number conversion
                        log.debug(bits);
                        for(int bit=bitCounter;bit>bitCounter-s.length();bit--){
                            log.debug("Setting bit " + bit + " with value " + bits.charAt(bitCounter-bit) + " from Label "+ parts[regCounter-1]);
                            outBinary[bit] = bits.charAt(bitCounter-bit);
                        }
                    }
                    else if (s.contains("X") && parts[regCounter].contains("$")){
                        int lineDif = variables.get(parts[regCounter++]) - lineNumber;
                        log.debug("Line Difference = " + lineDif);
                        String bits = Numbers.decToBin(lineDif,s.length(),true); // TODO: Add negative binary number conversion
                        log.debug(bits);
                        for(int bit=bitCounter;bit>bitCounter-s.length();bit--){
                            log.debug("Setting bit " + bit + " with value " + bits.charAt(bitCounter-bit) + " from Variable "+ parts[regCounter-1]);
                            outBinary[bit] = bits.charAt(bitCounter-bit);
                        }
                    }
                    if(bitCounter == 5 && (parts[0].equals("LDR") || parts[0].equals("STR"))){
                        if(parts[regCounter].matches(immRegEx6)){
                            String bits = "";
                            if(parts[regCounter].matches(decRegEx6))
                                bits = Numbers.decToBin(Integer.parseInt(parts[3].substring(1)),6,true);
                            else if(parts[regCounter].matches(hexRegEx6))
                                bits = Numbers.hexToBin(parts[regCounter],6);
                            else {
                                String error = "\tInvalid 6-bit Immediate Value on line "+lineNumber+"! \n\t\t"+line;
                                errors.add(error);
                                log.debug(error);
                            }
                            log.debug(bits);
                            for(int bit=5;bit>=0;bit--){
                                log.debug("Setting bit " + bit + " with value " + bits.charAt(bit) + " from immediate value");
                                outBinary[5-bit] = bits.charAt(bit);
                            }

                        } else {
                            String error = "\tInvalid 6-bit Immediate Value on line "+lineNumber+"! \n\t\t"+line;
                            errors.add(error);
                            log.debug(error);
                        }
                    }
                    if (s.contains("R") && parts[regCounter].contains("R")){
                        int r = Integer.parseInt(parts[regCounter++].substring(1));
                        String bits = Numbers.decToBin(r,3,false);
                        for(int bit=bitCounter;bit>bitCounter-3;bit--){
                            log.debug("Setting bit " + bit + " with value " + bits.charAt(bitCounter-bit) + " from Reg"+(regCounter-2)+"[" + (bitCounter-bit) + "]");
                            outBinary[bit] = bits.charAt(bitCounter-bit);
                        }
                        bitCounter -= 3;
                    }else {
                            for(char c: s.toCharArray()) {
                            if(c == '0' || c == '1'){
                                log.debug("Setting bit " + bitCounter + " with value " + c + " from command syntax");
                                outBinary[bitCounter--]=c;
                            }
                            else
                                bitCounter--;
                        }
                    }
                }
                //AND & ADD have 2 variants, check which is applicable

            } else {
                log.debug("Syntax Error on line "+lineNumber+"!");
                checkSyntax(line,com);
                return "";
            }
        } else {
            log.debug("Invalid Command Found on line "+lineNumber+"!");
            return "";
        }
        String out = "";
        for(char c: outBinary){
            out = c + out;
            if(c == '-'){
                String error = "\tError! Compiler missed bits on line " + lineNumber+"\n";
                error +="\t\t"+line;
                errors.add(error);
                log.debug(error);
                return "";
            }
        }
        return Numbers.binToHex(out);
    }
    /**
     * Checks the syntax of a line (an error exists), and places it into the errors ArrayList
     * @param   line    Line to check Syntax on
     * @param   com     Command to check syntax for
     */
    public static void checkSyntax(String line, Command com){
        // Check for invalid characters
        char[] cA = line.toCharArray();
        for(char c: cA){
            if(!(c+"").matches(valRegEx)){
                int pos = line.indexOf(c);
                String error = "Invalid Character on line " + lineNumber + "\n";
                error += "\t" + line + "\n\t";
                for(int i=0;i<pos;i++)
                    error += " ";
                error += "^ INVALID CHARACTER";
                log.debug(error);
                errors.add(error);
            }
        }
        // Check Regexs

        String temp = "";
        int level = 0;
        ArrayList<String> regexes = new ArrayList<String>();
        for(char c: com.regex.toCharArray()){
            if(c == '('){
                level++;
                temp += c;
            }
            else if(c == ')'){
                temp += c;
                if(--level == 0 && !temp.equals("([\\s]+)") && !temp.equals(spaRegEx)){
                    regexes.add(temp);
                    temp="";
                } else if(temp.equals("([\\s]+)") || temp.equals(spaRegEx)) {
                    temp="";
                }
            }
            else{
                temp += c;
            }
        }
        String[] parts = line.split("[\\s]+|"+spaRegEx);
        int i = 0;
        temp = "";
        for(char c: cA){
            if(temp.matches(regexes.get(i))){
                log.debug(regexes.get(i++) + " matches " + temp);
                temp = "";
            } else {
                temp += c;
            }
        }
        if(temp != ""){
            String error = "Syntax Error on line " + lineNumber + "\n";
            error += "\t"+line+"\n";
            error += "\t"+parts[i]+" is invalid! Must match " + regexes.get(i);
            log.debug(error);
            errors.add(error);
        }

    }


    public static void main(String[] args){
        /*
         * Checking Command line arguments to look for debugging information and filename info
         */
        if(args.length != 1 && args.length != 2){
            System.err.println("Requires command line input!");
            System.err.println("Proper usage : java site.projectname.nicasm.Assembler [-debug] filename ");
            System.exit(-1);
        } else if (args.length == 2) {
            if(!args[0].equals("-debug")){
                System.err.println("Invalid Syntax!");
                System.err.println("Proper usage : java site.projectname.nicasm.Assembler [-debug] filename ");
                System.exit(-1);
            }
            Logger.debugGlobal = true;
            Assembler.fileName = args[1];
        } else {
            if(args[0].equals("-debug") || args[0].equals("-h") || args[0].equals("--help")){
                System.err.println("Invalid Syntax!");
                System.err.println("Proper usage : java site.projectname.nicasm.Assembler [-debug] filename ");
                System.exit(-1);
            }
            Logger.debugGlobal = false;
            Assembler.fileName = args[0];
        }

        /*
         * Report start, create logs
         */
        System.out.println("Assembler Starting!");
        Assembler.log = Logger.getLog("Assembler",new SimpleDateFormat(""),Logger.debugGlobal);
        Assembler.log.write("Assembling file " + fileName);
        /*
         * If file does not end with .nic, warn that .nic file is expected, but continue
         */
        if(!fileName.endsWith(".nic")){
            log.debug("Warning: Files should end with '.nic'!");
        }

        /*
         * Create Scanner Object
         */
        File iF = null;
        File oF = null;
        try{
            iF = new File(fileName);
            inFile = new Scanner(iF);
        } catch(Exception e){
            log.writeError(e);
            System.err.println("File not found!");
            log.debug("Looking for inFile at:");
            log.debug(iF.getAbsolutePath());
            System.exit(-1);
        }
        try{
            oF = new File(fileName.split("[.]")[0] + ".nicp");
            outFile = new PrintWriter(oF);
        } catch(Exception e){log.writeError(e);}
        Numbers.init();
        String secondPasser = "";
        while(inFile.hasNextLine()){
            String line = inFile.nextLine();
            secondPasser += firstPass(line)+"\n";
        }
        System.out.println("First Pass Complete!");
        if(!errors.isEmpty()){
            System.err.println("Errors Found!");
            for(String s: errors)
                System.err.println(s);
            System.exit(-1);
        } else
            System.out.println("\tNo errors found on first pass!");
        log.debug("Variables found: " + variables.keySet());
        log.debug("Labels found: " + labels.keySet());
        try{inFile = new Scanner(secondPasser);}catch(Exception e){log.writeError(e);} //Good Practice be damned
        lineNumber = 1;

        while(inFile.hasNextLine()){
            String line = convertLine(inFile.nextLine());
            if(line.length() > 0){
                log.debug(line+"");
                outFile.print(line+" ");
            }
        }
        System.out.println("Second Pass Complete!");
        if(!errors.isEmpty()){
            System.err.println("Errors Found!");
            for(String s: errors)
                System.err.println(s);
            System.exit(-1);
        } else
            System.out.println("\tNo errors found on second pass!");

        outFile.flush();
    }
}
